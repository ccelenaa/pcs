version: '3.7'

networks:
    # Le reseau globale pour les echange entre conteneurs (exception entre api et postgresql).
    reseau_public:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.20.0.0/16
    
    # Le reseau qui isole les conteneurs: api-pcs, api-stripe, postgresql.  Pour securiser les echanges.
    reseau_securise:
        driver: bridge
        ipam:
            driver: default
            config:
                - subnet: 172.30.0.0/16


volumes:
    volume_fichiers:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: docker/api-pcs/public
    volume_donnees:
        driver: local
        driver_opts:
            o: bind
            type: none
            device: docker/postgres/


services:

    # Le conteneur Nginx-PROXY:
    #   1- Il securise les échange avec l'exterieur en utilisant les certificats SSL/TLS
    #   1- Il recoit les requetes externe et qui les redérige vers les conteneurs adéquoit
    nginx:
        container_name: nginx
        image: nginx:1.23.2-alpine
        networks:
            reseau_public:
                ipv4_address: 172.20.0.20
        ports:
            - "80:80"
            - "${NGINX_PORT:-443}:443"
        volumes:
            - ./docker/nginx:/etc/nginx/conf.d
            - ./docker/nginx/SSL/certs/rsa:/etc/nginx/ssl
            - ./docker/api-pcs/public:/var/www/pcs/public
            - ./docker/front-pcs/development.js:/var/www/pcs/public/js/env.js

    # Le conteneur front-end
    front-pcs:
        container_name: front-pcs
        image: docker.io/celenaaa/front-pcs:3.5.0
        networks:
            reseau_public:
                ipv4_address: 172.20.0.21
        restart: always
        ports:
            - "3003:80"
        environment:
            NODE_ENV: production


    # Api-pcs: c'est l'api backend
    #   ce conteneur appartien aux 2 reseaux.
    api-pcs:
        container_name: api-pcs
        image: docker.io/celenaaa/api-pcs:3.5.0
        networks:
            reseau_securise:
                ipv4_address: 172.30.0.31
            reseau_public:
                ipv4_address: 172.20.0.22

        restart: always
        volumes:
            - ./docker/api-pcs/config:/usr/lib/pcs/api-pcs/config
            - ./docker/api-pcs/public:/usr/lib/pcs/api-pcs/public
        ports:
            - "3000:80"
        environment:
            NODE_ENV: production
            DATABASE_URL: 'postgresql://pcs:pcs@postgresql:5432/pcs?schema=public'


    # Api de paiement stripe
    #   ce conteneur apartien au reseau sécurisé (reseau_securise)
    api-stripe:
        container_name: api-stripe
        image: docker.io/celenaaa/api-stripe:1.3.0
        networks:
            reseau_securise:
                ipv4_address: 172.30.0.32
        restart: always
        volumes:
            - ./docker/api-stripe/config:/usr/lib/pcs/api-stripe/config
        environment:
            NODE_ENV: production
        ports:
        - "3002:80"


    # Postgresql: la base de données 
    #   ce conteneur apartien au reseau sécurisé (reseau_securise)
    postgresql:
        container_name: postgresql
        image: "postgres:15-alpine"
        networks:
            reseau_securise:
                ipv4_address: 172.30.0.33
        environment:
            POSTGRES_DB:       "pcs"
            POSTGRES_USER:     "pcs"
            POSTGRES_PASSWORD: "pcs"
        volumes:
            - ./docker/postgres/data:/var/lib/postgresql/data
            - ./docker/postgres/init-db:/docker-entrypoint-initdb.d
        ports:
        - "5432:5432"


