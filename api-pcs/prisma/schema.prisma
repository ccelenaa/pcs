generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bailleur {
  id           BigInt    @id @default(autoincrement())
  name         String?   @db.VarChar(128)
  email        String    @db.VarChar(128)
  login        String    @db.VarChar(32)
  password     String    @db.VarChar(512)
  locale       String    @default("fr") @db.VarChar(32)
  data         Json      @default("{}")
  verified_at  DateTime?
  suspended_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  deleted_at   DateTime?
  bien         bien[]
}

model bien {
  id           BigInt     @id @default(autoincrement())
  id_bailleur  BigInt
  type         String     @db.VarChar(64)
  area         String     @db.VarChar(255)
  description  String     @db.VarChar(255)
  status       String     @db.VarChar(64)
  price        String     @db.VarChar(32)
  currency     String     @default("eu") @db.VarChar(32)
  data         Json       @default("{}")
  validated_at DateTime?
  created_at   DateTime   @default(now())
  updated_at   DateTime   @default(now())
  deleted_at   DateTime?
  bailleur     bailleur   @relation(fields: [id_bailleur], references: [id], map: "bien_bailleur_id_fkey")
  location     location[]
  photo        photo[]
  planing      planing[]
}

model langue {
  id         BigInt    @id @default(autoincrement())
  locale     String    @default("fr") @db.VarChar(32)
  label      String    @default("Fran√ßais") @db.VarChar(32)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
}

model location {
  id          BigInt    @id @default(autoincrement())
  id_bien     BigInt
  id_voyageur BigInt
  id_facture  BigInt?
  data        Json      @default("{}")
  price       String    @db.VarChar(32)
  price_total String    @db.VarChar(32)
  currency    String    @default("eu") @db.VarChar(32)
  start_at    DateTime  @default(now())
  end_at      DateTime  @default(now())
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now())
  deleted_at  DateTime?
  bien        bien      @relation(fields: [id_bien], references: [id], map: "location_bien_id_fkey")
  facture     facture?  @relation(fields: [id_facture], references: [id], onDelete: Restrict, map: "location_facture_id_fkey")
  voyageur    voyageur  @relation(fields: [id_voyageur], references: [id], map: "location_voyageur_id_fkey")
}

model photo {
  id         BigInt    @id @default(autoincrement())
  id_bien    BigInt
  url        String    @db.VarChar(32)
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  bien       bien      @relation(fields: [id_bien], references: [id], map: "photo_bien_id_fkey")
}

model planing {
  id         BigInt    @id @default(autoincrement())
  id_bien    BigInt
  data       Json      @default("{}")
  status     String?   @db.VarChar(32)
  start_at   DateTime  @default(now())
  end_at     DateTime  @default(now())
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  bien       bien      @relation(fields: [id_bien], references: [id], map: "planing_bien_id_fkey")
}

model prestataire {
  id                          BigInt                        @id @default(autoincrement())
  name                        String?                       @db.VarChar(128)
  email                       String                        @db.VarChar(128)
  login                       String                        @db.VarChar(32)
  password                    String                        @db.VarChar(512)
  locale                      String                        @default("fr") @db.VarChar(32)
  data                        Json                          @default("{}")
  verified_at                 DateTime?
  suspended_at                DateTime?
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @default(now())
  deleted_at                  DateTime?
  prestataire_type_prestation prestataire_type_prestation[]
  prestation                  prestation[]
}

model voyageur {
  id           BigInt       @id @default(autoincrement())
  name         String?      @db.VarChar(128)
  email        String       @db.VarChar(128)
  tel          String       @db.VarChar(32)
  login        String       @db.VarChar(32)
  password     String       @db.VarChar(512)
  locale       String       @default("fr") @db.VarChar(32)
  data         Json         @default("{}")
  suspended_at DateTime?
  verified_at  DateTime?    @default(now())
  created_at   DateTime     @default(now())
  updated_at   DateTime     @default(now())
  deleted_at   DateTime?
  location     location[]
  prestation   prestation[]
}

model admin {
  id         BigInt    @id @default(autoincrement())
  name       String?   @db.VarChar(128)
  email      String    @db.VarChar(128)
  tel        String    @db.VarChar(32)
  login      String    @db.VarChar(32)
  password   String    @db.VarChar(512)
  locale     String    @default("fr") @db.VarChar(32)
  data       Json      @default("{}")
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
}

model Organization {
  id           String        @id @default(uuid()) @db.Uuid
  type         String        @default("association") @db.VarChar(32)
  reference    String        @unique @db.VarChar(255)
  name         String        @db.VarChar(255)
  description  Json          @default("{}")
  locale       String        @default("fr") @db.VarChar(32)
  options      Json          @default("{}")
  data         Json          @default("{}")
  start_at     DateTime?
  end_at       DateTime?
  expired_at   DateTime?
  suspended_at DateTime?
  closed_at    DateTime?
  deleted_at   DateTime?
  created_at   DateTime      @default(now())
  updated_at   DateTime      @default(now())
  covers       Cover[]       @relation("organization_covers")
  groups       Group[]
  menus        Menu[]        @relation("organization_menus")
  pages        Page[]        @relation("organization_pages")
  publications Publication[] @relation("organization_publications")
  seats        Seat[]
  wallets      Wallet[]      @relation("organization_wallets")

  @@map("organizations")
}

model Seat {
  id              String       @id @default(uuid()) @db.Uuid
  organization_id String       @db.Uuid
  reference       String       @unique @db.VarChar(10)
  name            String       @db.VarChar(255)
  description     String
  locale          String       @default("fr") @db.VarChar(32)
  options         Json         @default("{}")
  data            Json         @default("{}")
  start_at        DateTime?
  closed_at       DateTime?
  deleted_at      DateTime?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  members         Member[]     @relation("seat")
  organization    Organization @relation(fields: [organization_id], references: [id])

  @@map("seats")
}

model Account {
  id           String    @id @default(uuid()) @db.Uuid
  firstname    String?   @db.VarChar(64)
  lastname     String?   @db.VarChar(64)
  birthday     DateTime?
  email        String    @unique @db.VarChar(64)
  login        String    @unique @db.VarChar(32)
  password     String    @db.VarChar(512)
  locale       String    @default("fr") @db.VarChar(32)
  options      Json      @default("{}")
  data         Json      @default("{}")
  verified_at  DateTime?
  suspended_at DateTime?
  closed_at    DateTime?
  deleted_at   DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now())
  members      Member[]  @relation("account")

  @@map("accounts")
}

model Member {
  id                   String        @id @default(uuid()) @db.Uuid
  account_id           String        @db.Uuid
  seat_id              String        @db.Uuid
  code                 String        @db.VarChar(16)
  status               String        @default("new") @db.VarChar(32)
  options              Json          @default("{}")
  data                 Json          @default("{}")
  sponsored_by         String?       @db.Uuid
  start_at             DateTime?
  end_at               DateTime?
  expired_at           DateTime?
  suspended_at         DateTime?
  closed_at            DateTime?
  deleted_at           DateTime?
  created_at           DateTime      @default(now())
  updated_at           DateTime      @default(now())
  created_covers       Cover[]       @relation("creation")
  delegate             Delegate[]    @relation("delegation")
  account              Account       @relation("account", fields: [account_id], references: [id])
  seat                 Seat          @relation("seat", fields: [seat_id], references: [id])
  sponsor              Member?       @relation("sponsorship", fields: [sponsored_by], references: [id])
  sponsorships         Member[]      @relation("sponsorship")
  created_menus        Menu[]        @relation("creation")
  created_pages        Page[]        @relation("creation")
  created_publications Publication[] @relation("creation")
  states               State[]       @relation("managment")
  created_wallets      Wallet[]      @relation("creation")

  @@map("members")
}

model State {
  id         BigInt   @id @default(autoincrement())
  managed_by String?  @db.Uuid
  model      String   @db.VarChar(64)
  model_id   String   @db.Uuid
  name       String   @db.VarChar(32)
  value      String   @db.VarChar(32)
  data       Json     @default("{}")
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  manager    Member?  @relation("managment", fields: [managed_by], references: [id])

  @@map("states")
}

model Group {
  id              String       @id @default(uuid()) @db.Uuid
  organization_id String       @db.Uuid
  reference       String       @db.VarChar(255)
  data            Json         @default("{}")
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  deleted_at      DateTime?
  delegation      Delegate[]   @relation("delegation")
  organization    Organization @relation(fields: [organization_id], references: [id])

  @@map("groups")
}

model Page {
  id                String            @id @default(uuid()) @db.Uuid
  created_by        String            @db.Uuid
  organization_id   String            @db.Uuid
  slug              String            @db.VarChar(512)
  title             String            @db.VarChar(512)
  home              Int?
  order_by          String            @default("date") @db.VarChar(16)
  options           Json              @default("{}")
  data              Json              @default("{}")
  start_at          DateTime?
  end_at            DateTime?
  suspended_at      DateTime?
  deleted_at        DateTime?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  creator           Member            @relation("creation", fields: [created_by], references: [id])
  organization      Organization      @relation("organization_pages", fields: [organization_id], references: [id])
  page_covers       PageCover[]       @relation("pages_covers")
  page_publications PagePublication[] @relation("pages_publications")

  @@unique([organization_id, slug])
  @@map("pages")
}

model Cover {
  id              String       @id @default(uuid()) @db.Uuid
  created_by      String       @db.Uuid
  organization_id String       @db.Uuid
  image           String?      @db.VarChar(1024)
  target          Json         @default("{}")
  options         Json         @default("{}")
  data            Json         @default("{}")
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  deleted_at      DateTime?
  creator         Member       @relation("creation", fields: [created_by], references: [id])
  organization    Organization @relation("organization_covers", fields: [organization_id], references: [id])
  cover_pages     PageCover[]  @relation("pages_covers")

  @@map("covers")
}

model PageCover {
  id         String    @id @default(uuid()) @db.Uuid
  page_id    String    @db.Uuid
  cover_id   String    @db.Uuid
  position   Int       @default(1)
  options    Json      @default("{}")
  data       Json      @default("{}")
  start_at   DateTime?
  end_at     DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  cover      Cover     @relation("pages_covers", fields: [cover_id], references: [id])
  page       Page      @relation("pages_covers", fields: [page_id], references: [id])

  @@map("pages_covers")
}

model Menu {
  id              String       @id @default(uuid()) @db.Uuid
  parent_id       String?      @db.Uuid
  created_by      String?      @db.Uuid
  organization_id String       @db.Uuid
  title           String       @default("Menu title") @db.VarChar(255)
  position        Int          @default(1)
  type            String       @default("link") @db.VarChar(64)
  category        String       @default("main")
  target          Json         @default("{}")
  options         Json         @default("{}")
  data            Json         @default("{}")
  deleted_at      DateTime?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  creator         Member?      @relation("creation", fields: [created_by], references: [id])
  organization    Organization @relation("organization_menus", fields: [organization_id], references: [id])
  parent          Menu?        @relation("sub_menus", fields: [parent_id], references: [id])
  sub_menus       Menu[]       @relation("sub_menus")

  @@map("menus")
}

model PagePublication {
  id             String      @id @default(uuid()) @db.Uuid
  page_id        String      @db.Uuid
  publication_id String      @db.Uuid
  position       Int         @default(1)
  data           Json        @default("{}")
  start_at       DateTime?
  end_at         DateTime?
  deleted_at     DateTime?
  pined_at       DateTime    @default(now())
  created_at     DateTime    @default(now())
  updated_at     DateTime    @default(now())
  page           Page        @relation("pages_publications", fields: [page_id], references: [id])
  publication    Publication @relation("pages_publications", fields: [publication_id], references: [id])

  @@map("pages_publications")
}

model Publication {
  id                String            @id @default(uuid()) @db.Uuid
  created_by        String            @db.Uuid
  organization_id   String            @db.Uuid
  slug              String            @unique @db.VarChar(512)
  title             String            @db.VarChar(512)
  content_id        String            @db.VarChar(64)
  content_type      String            @db.VarChar(64)
  options           Json              @default("{}")
  data              Json              @default("{}")
  start_at          DateTime?
  end_at            DateTime?
  deleted_at        DateTime?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @default(now())
  publication_pages PagePublication[] @relation("pages_publications")
  creator           Member            @relation("creation", fields: [created_by], references: [id])
  organization      Organization      @relation("organization_publications", fields: [organization_id], references: [id])

  @@map("publications")
}

model Document {
  id             String    @id @default(uuid()) @db.Uuid
  publication_id String    @db.Uuid
  title          String    @db.VarChar(512)
  content        String
  options        Json      @default("{}")
  data           Json      @default("{}")
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  @@map("documents")
}

model Event {
  id             String    @id @default(uuid()) @db.Uuid
  publication_id String    @db.Uuid
  title          String    @db.VarChar(512)
  content        String
  options        Json      @default("{}")
  data           Json      @default("{}")
  start_at       DateTime?
  end_at         DateTime?
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  @@map("events")
}

model Choice {
  id             String    @id @default(uuid()) @db.Uuid
  publication_id String    @db.Uuid
  title          String    @db.VarChar(512)
  content        String
  options        Json      @default("{}")
  data           Json      @default("{}")
  start_at       DateTime?
  end_at         DateTime?
  deleted_at     DateTime?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @default(now())

  @@map("choices")
}

model Wallet {
  id              String       @id @default(uuid()) @db.Uuid
  created_by      String       @db.Uuid
  organization_id String       @db.Uuid
  title           String       @db.VarChar(512)
  description     String
  options         Json         @default("{}")
  data            Json         @default("{}")
  start_at        DateTime?
  end_at          DateTime?
  deleted_at      DateTime?
  created_at      DateTime     @default(now())
  updated_at      DateTime     @default(now())
  creator         Member       @relation("creation", fields: [created_by], references: [id])
  organization    Organization @relation("organization_wallets", fields: [organization_id], references: [id])

  @@map("wallets")
}

model Price {
  id         String    @id @default(uuid()) @db.Uuid
  model      String?   @db.VarChar(32)
  model_id   String?   @db.Uuid
  value      Json      @default("{}")
  title      String?   @db.VarChar(521)
  comment    String?   @db.VarChar(1024)
  options    Json      @default("{}")
  data       Json      @default("{}")
  start_at   DateTime?
  end_at     DateTime?
  deleted_at DateTime?
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())

  @@map("prices")
}

model Transaction {
  id         String    @id @default(uuid()) @db.Uuid
  status     String?   @db.VarChar(100)
  data       Json      @default("{}")
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?

  @@map("transactions")
}

model Type {
  id              String    @id @default(uuid()) @db.Uuid
  organization_id String    @db.Uuid
  data            Json      @default("{}")
  deleted_at      DateTime?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @default(now())

  @@map("types")
}

model Delegate {
  id         String    @id @default(uuid()) @db.Uuid
  member_id  String    @db.Uuid
  group_id   String    @db.Uuid
  data       Json      @default("{}")
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now())
  deleted_at DateTime?
  group      Group     @relation("delegation", fields: [group_id], references: [id])
  member     Member    @relation("delegation", fields: [member_id], references: [id])

  @@map("delegates")
}

model facture {
  id         BigInt       @id @default(autoincrement())
  type       String       @default("location") @db.VarChar(32)
  prix       Int          @default(0)
  total      Int          @default(0)
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now())
  deleted_at DateTime?
  location   location[]
  prestation prestation[]
}

model prestataire_type_prestation {
  id                 BigInt          @id @default(autoincrement())
  id_prestataire     BigInt
  id_type_prestation BigInt
  price              Int             @default(0)
  created_at         DateTime        @default(now())
  updated_at         DateTime        @default(now())
  deleted_at         DateTime?
  prestataire        prestataire     @relation(fields: [id_prestataire], references: [id], map: "prestataire_type_prestation_prestataire_id_fkey")
  type_prestation    type_prestation @relation(fields: [id_type_prestation], references: [id], map: "prestataire_type_prestation_type_prestation_id_fkey")
}

model prestation {
  id                          BigInt          @id @default(autoincrement())
  id_voyageur                 BigInt          @default(autoincrement())
  id_prestataire              BigInt          @default(autoincrement())
  id_type_prestation          BigInt          @default(autoincrement())
  id_facture                  BigInt          @default(autoincrement())
  lieu_prestation             String?         @db.VarChar(512)
  date_prestation             DateTime?
  date_validation_voyageur    DateTime?
  date_validation_prestataire DateTime?
  status                      String          @default("new") @db.VarChar(32)
  remarque                    String?         @db.VarChar(512)
  note                        Int             @default(0)
  created_at                  DateTime        @default(now())
  updated_at                  DateTime        @default(now())
  deleted_at                  DateTime?
  facture                     facture         @relation(fields: [id_facture], references: [id], map: "prestation_facture_id_fkey")
  prestataire                 prestataire     @relation(fields: [id_prestataire], references: [id], map: "prestation_prestataire_id_fkey")
  type_prestation             type_prestation @relation(fields: [id_type_prestation], references: [id], map: "prestation_type_prestation_id_fkey")
  voyageur                    voyageur        @relation(fields: [id_voyageur], references: [id], map: "prestation_voyageur_id_fkey")
}

model type_prestation {
  id                          BigInt                        @id @default(autoincrement())
  label                       String?                       @db.VarChar(255)
  created_at                  DateTime                      @default(now())
  updated_at                  DateTime                      @default(now())
  deleted_at                  DateTime?
  prestataire_type_prestation prestataire_type_prestation[]
  prestation                  prestation[]
}
